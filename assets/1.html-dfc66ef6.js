const e=JSON.parse('{"key":"v-336246ba","path":"/category/TypeScript/1.html","title":"TypeScript程序员晋级的11个必备技巧","lang":"zh-CN","frontmatter":{"title":"TypeScript程序员晋级的11个必备技巧","lang":"zh-CN","date":"2022-04-13T14:55:00.000Z","author":"XXXWeii","category":["TypeScript"],"tag":["TypeScript"],"description":"当你学习 TypeScript 时，你的第一印象可能会欺骗你：这不就是 JavaScript 注解的一种方式吗？不就是编译器用来帮助我找到潜在 bug 的吗？ 虽然这种说法没错，但随着你对 TypeScript 不断了解，你会发现这门编程语言最不可思议的力量在于编写、推断和操作数据类型。 本文总结的一些技巧，可以帮助大家充分发挥 TypeScript 的潜力。 #1 用集合的概念思考问题 数据类型是程序员日常要处理的概念，但要简洁地定义它却出奇地困难。然而我发现集合非常适合用作概念模型。 刚开始学习 TypeScript 时，我们常常会发现用 TypeScript 编写类型的方式很不自然。举一个非常简单的例子：","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/XXXWeiiBlog/category/TypeScript/1.html"}],["meta",{"property":"og:site_name","content":"XXXWeii"}],["meta",{"property":"og:title","content":"TypeScript程序员晋级的11个必备技巧"}],["meta",{"property":"og:description","content":"当你学习 TypeScript 时，你的第一印象可能会欺骗你：这不就是 JavaScript 注解的一种方式吗？不就是编译器用来帮助我找到潜在 bug 的吗？ 虽然这种说法没错，但随着你对 TypeScript 不断了解，你会发现这门编程语言最不可思议的力量在于编写、推断和操作数据类型。 本文总结的一些技巧，可以帮助大家充分发挥 TypeScript 的潜力。 #1 用集合的概念思考问题 数据类型是程序员日常要处理的概念，但要简洁地定义它却出奇地困难。然而我发现集合非常适合用作概念模型。 刚开始学习 TypeScript 时，我们常常会发现用 TypeScript 编写类型的方式很不自然。举一个非常简单的例子："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-02T10:35:38.000Z"}],["meta",{"property":"article:author","content":"XXXWeii"}],["meta",{"property":"article:tag","content":"TypeScript"}],["meta",{"property":"article:published_time","content":"2022-04-13T14:55:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-02T10:35:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"TypeScript程序员晋级的11个必备技巧\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-13T14:55:00.000Z\\",\\"dateModified\\":\\"2023-06-02T10:35:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"XXXWeii\\"}]}"]]},"headers":[{"level":2,"title":"#1 用集合的概念思考问题","slug":"_1-用集合的概念思考问题","link":"#_1-用集合的概念思考问题","children":[]},{"level":2,"title":"#2 了解声明类型和收窄类型","slug":"_2-了解声明类型和收窄类型","link":"#_2-了解声明类型和收窄类型","children":[]},{"level":2,"title":"#3 使用可区分的联合类型而不是可选字段","slug":"_3-使用可区分的联合类型而不是可选字段","link":"#_3-使用可区分的联合类型而不是可选字段","children":[]},{"level":2,"title":"#4 使用类型谓词避免类型断言","slug":"_4-使用类型谓词避免类型断言","link":"#_4-使用类型谓词避免类型断言","children":[]},{"level":2,"title":"#5 控制联合类型的分布方式","slug":"_5-控制联合类型的分布方式","link":"#_5-控制联合类型的分布方式","children":[]},{"level":2,"title":"#6 使用详尽检查捕获在编译时未处理的情况","slug":"_6-使用详尽检查捕获在编译时未处理的情况","link":"#_6-使用详尽检查捕获在编译时未处理的情况","children":[]},{"level":2,"title":"#7 宁可使用 type 而不是 interface","slug":"_7-宁可使用-type-而不是-interface","link":"#_7-宁可使用-type-而不是-interface","children":[]},{"level":2,"title":"#8 只要合适宁可使用元组而不是数组","slug":"_8-只要合适宁可使用元组而不是数组","link":"#_8-只要合适宁可使用元组而不是数组","children":[]},{"level":2,"title":"#9 控制推断类型的通用性或特殊性","slug":"_9-控制推断类型的通用性或特殊性","link":"#_9-控制推断类型的通用性或特殊性","children":[]},{"level":2,"title":"#10 使用 infer 创建额外的泛型类型参数","slug":"_10-使用-infer-创建额外的泛型类型参数","link":"#_10-使用-infer-创建额外的泛型类型参数","children":[]},{"level":2,"title":"#11 创新类型操作以保持 DRY","slug":"_11-创新类型操作以保持-dry","link":"#_11-创新类型操作以保持-dry","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1685702138000,"updatedTime":1685702138000,"contributors":[{"name":"zjw977020546","email":"11487928+zjw977020546@user.noreply.gitee.com","commits":1}]},"readingTime":{"minutes":9.97,"words":2990},"filePathRelative":"category/TypeScript/1.md","localizedDate":"2022年4月13日","excerpt":"<p>当你学习 TypeScript 时，你的第一印象可能会欺骗你：这不就是 JavaScript 注解的一种方式吗？不就是编译器用来帮助我找到潜在 bug 的吗？</p>\\n<p>虽然这种说法没错，但随着你对 TypeScript 不断了解，你会发现这门编程语言最不可思议的力量在于编写、推断和操作数据类型。</p>\\n<p>本文总结的一些技巧，可以帮助大家充分发挥 TypeScript 的潜力。</p>\\n<h2> #1 用集合的概念思考问题</h2>\\n<hr>\\n<p>数据类型是程序员日常要处理的概念，但要简洁地定义它却出奇地困难。然而我发现集合非常适合用作概念模型。</p>\\n<p>刚开始学习 TypeScript 时，我们常常会发现用 TypeScript 编写类型的方式很不自然。举一个非常简单的例子：</p>","autoDesc":true}');export{e as data};
