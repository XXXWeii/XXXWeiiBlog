const e=JSON.parse('{"key":"v-fcd8f164","path":"/category/JavaScript/5.html","title":"编写干净 JavaScript 代码的15个小技巧","lang":"zh-CN","frontmatter":{"title":"编写干净 JavaScript 代码的15个小技巧","lang":"zh-CN","author":"XXXWeii","date":"2023-04-10T14:55:00.000Z","category":["JavaScript"],"tag":["JavaScript"],"description":"我们应该编写不言自明、易于理解、易于修改或易于扩展新功能的代码。因为代码常常需要被阅读，这就是为什么如此强调干净代码的原因。 我们的源代码可读性越强，则： 越容易维护 新开发人员理解代码所需的时间越少 越容易发现哪些代码可以重用 在这篇文章中，我将分享一些通用的干净编码原则以及一些特定于 JavaScript 的干净编码实践。 0. 命名 不要把命名变成猜谜游戏。变量和函数的名称最好能够揭示最初创建的意图。 如此一来，即使有新的开发人员加入团队，也不至于需要像看天书一样艰难地理解代码。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/XXXWeiiBlog/category/JavaScript/5.html"}],["meta",{"property":"og:site_name","content":"XXXWeii"}],["meta",{"property":"og:title","content":"编写干净 JavaScript 代码的15个小技巧"}],["meta",{"property":"og:description","content":"我们应该编写不言自明、易于理解、易于修改或易于扩展新功能的代码。因为代码常常需要被阅读，这就是为什么如此强调干净代码的原因。 我们的源代码可读性越强，则： 越容易维护 新开发人员理解代码所需的时间越少 越容易发现哪些代码可以重用 在这篇文章中，我将分享一些通用的干净编码原则以及一些特定于 JavaScript 的干净编码实践。 0. 命名 不要把命名变成猜谜游戏。变量和函数的名称最好能够揭示最初创建的意图。 如此一来，即使有新的开发人员加入团队，也不至于需要像看天书一样艰难地理解代码。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/XXXWeiiBlog/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-02T10:35:38.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"编写干净 JavaScript 代码的15个小技巧"}],["meta",{"property":"article:author","content":"XXXWeii"}],["meta",{"property":"article:tag","content":"JavaScript"}],["meta",{"property":"article:published_time","content":"2023-04-10T14:55:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-02T10:35:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"编写干净 JavaScript 代码的15个小技巧\\",\\"image\\":[\\"https://mister-hope.github.io/XXXWeiiBlog/\\"],\\"datePublished\\":\\"2023-04-10T14:55:00.000Z\\",\\"dateModified\\":\\"2023-06-02T10:35:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"XXXWeii\\"}]}"]]},"headers":[{"level":2,"title":"0. 命名","slug":"_0-命名","link":"#_0-命名","children":[]},{"level":2,"title":"1. 条件句","slug":"_1-条件句","link":"#_1-条件句","children":[]},{"level":2,"title":"2. 函数应该专注做单一一件事","slug":"_2-函数应该专注做单一一件事","link":"#_2-函数应该专注做单一一件事","children":[]},{"level":2,"title":"3. 使用默认参数","slug":"_3-使用默认参数","link":"#_3-使用默认参数","children":[]},{"level":2,"title":"4. 单级抽象（SLA）","slug":"_4-单级抽象-sla","link":"#_4-单级抽象-sla","children":[]},{"level":2,"title":"5. 不要忽略被捕获的异常","slug":"_5-不要忽略被捕获的异常","link":"#_5-不要忽略被捕获的异常","children":[]},{"level":2,"title":"6. 尽量减少注释","slug":"_6-尽量减少注释","link":"#_6-尽量减少注释","children":[]},{"level":2,"title":"7. 移除注释掉的代码","slug":"_7-移除注释掉的代码","link":"#_7-移除注释掉的代码","children":[]},{"level":2,"title":"8. 只导入你需要的","slug":"_8-只导入你需要的","link":"#_8-只导入你需要的","children":[]},{"level":2,"title":"9. 保持函数参数不超过 3 个（理想情况下）","slug":"_9-保持函数参数不超过-3-个-理想情况下","link":"#_9-保持函数参数不超过-3-个-理想情况下","children":[]},{"level":2,"title":"10. 使用数组展开来复制数组","slug":"_10-使用数组展开来复制数组","link":"#_10-使用数组展开来复制数组","children":[]},{"level":2,"title":"11. 写线性代码","slug":"_11-写线性代码","link":"#_11-写线性代码","children":[]},{"level":2,"title":"12. 使用 ESLint 和 Prettier","slug":"_12-使用-eslint-和-prettier","link":"#_12-使用-eslint-和-prettier","children":[]},{"level":2,"title":"13. 适当使用括号","slug":"_13-适当使用括号","link":"#_13-适当使用括号","children":[]},{"level":2,"title":"14.早早地从函数中返回","slug":"_14-早早地从函数中返回","link":"#_14-早早地从函数中返回","children":[]},{"level":2,"title":"结论","slug":"结论","link":"#结论","children":[]}],"git":{"createdTime":1685702138000,"updatedTime":1685702138000,"contributors":[{"name":"zjw977020546","email":"11487928+zjw977020546@user.noreply.gitee.com","commits":1}]},"readingTime":{"minutes":6.45,"words":1935},"filePathRelative":"category/JavaScript/5.md","localizedDate":"2023年4月10日","excerpt":"<p>我们应该编写不言自明、易于理解、易于修改或易于扩展新功能的代码。因为代码常常需要被阅读，这就是为什么如此强调干净代码的原因。</p>\\n<p>我们的源代码可读性越强，则：</p>\\n<ul>\\n<li>越容易维护</li>\\n<li>新开发人员理解代码所需的时间越少</li>\\n<li>越容易发现哪些代码可以重用</li>\\n</ul>\\n<p>在这篇文章中，我将分享一些通用的干净编码原则以及一些特定于 JavaScript 的干净编码实践。</p>\\n<h2> 0. 命名</h2>\\n<hr>\\n<p>不要把命名变成猜谜游戏。变量和函数的名称最好能够揭示最初创建的意图。</p>\\n<p>如此一来，即使有新的开发人员加入团队，也不至于需要像看天书一样艰难地理解代码。</p>","autoDesc":true}');export{e as data};
